# ESTC-publishers
This repository is part of the ESTC data unification project by Helsinki computational history group ([COMHIS](https://comhis.github.io/)). 

It provides code for processing the publisher (and other actor) information found in the English Short Title Catalogue (ESTC) and outputs unified and unique data for the various actors involed in the 18th century book trade. Unique IDs for the actors are based on the data found in the British Booktrade Index (BBTI).

## Input

#### ESTC input
The main inputs are a preprocessed version of the ESTC publisher -field produced by the [main R script for ESTC](https://github.com/COMHIS/estc).

The latest version of that data can be found at the [unified ESTC data repository](https://github.com/COMHIS/estc-data-private/blob/master/estc-cleaned-initial/estc_processed.csv.zip).

The fields used are:
* "id"
* "author"
* "publisher"
* "publication_year"
* "title"
* "publication_place"
* "country"

#### External input
The major external source is the British Book Trade Index -database ([BBTI](http://bbti.bodleian.ox.ac.uk/)).

This dataset is available in csv format in the COMHIS ESTC data repository. It can be recreated by the Python scraper in [./bbti_querist](./bbti_querist), if need be.

Additionally, this repository has internal data tables in ./category_tables and ./csv_data -directories.

The publisher data from [ESTC VIAF scripts](https://github.com/COMHIS/estc-viaf)  can be integrated into the workflow here. In that case, place "estc_viaf_finished.csv" output of that workflow into the ./csv_data -folder of this repository.

### Input data preparation steps

1. Get the main ESTC .csv (estc_processed_080517.csv) -file and specify it's location in [./r-scripts/main1_get_publisherdata_list.R](./r-scripts/main1_get_publisherdata_list.R).
2. Get the BBTI .csv (bbtidata_unified.csv) and place it in ./csv_data -directory.
3. *optional* add ESTC VIAF data.

### Input UML

> TBD

## Data processing
Set the variables `global_datadir` and `global_outpath` in `./r-scripts/lib/get_publishers_globals_setup.R`.

For hands -off approach run [./r-scripts/main_wrapper.R](./r-scripts/main_wrapper.R)

For that you need the various datafiles in place- the processed ESTC csv-file, and the BBTI csv. For those, refer back to *Input* -section of this document.

### Data processing - detailed
The `./r-scripts/main_wrapper.R` runs sequence of scripts that produce the final actor data.

* `./r-scripts/main1_get_publisherdata_list.R` breaks the publishers statement strings down and outputs a csv file with each detected actor separated on their own line.
* `./r-scripts/main2_get_publisherdata_postprocessing.R` further processes and unifies the detected actors' names and adds additional metadata, such as profession.
* `./r-scripts/main3_publisherdata_bbti_link.R` produces links to the BBTI data and gives each actor found there an unique identifier.
* optional script at `./r-scripts/./main4_marks_publisher_data_integration.R` brings in actors that have been given unique ID by the ESTC VIAF script *(see above)*
* `./r-scripts/main5_final_output.R` produces a minimal clean output of the above for further analysis.

### UML Overview

> TBD

## Output

The various output csvs are output in the directory specied in the `global_outpath` -variable set in `./r-scripts/lib/get_publishers_globals_setup.R`.

### Final output csv

The fields of the final output csv are as follows:

* **actor_id** - Unique id for each actor, if found. Refers to the BBTI url.
* **estc_id** - ESTC id used to link the actors to ESTC titles.
* **last_name** - Family name of the actor.
* **first_name** - First name of the actor.
* **actor_title** - A title attached to the actor. e.g. `esq` or `Mrs.`
* **actor_attribute** - An attribute part of the actor's name. e.g. `junior`
* **address** - Address information linked to the actor.
* **relation_type** - Present if the actor has a relationship stated in the publishers field. e.g. `executrix of`
* **relation_target** - Present if a target for the relationship is stated. Not linked to unique id. e.g. `Thomas Newcomb`
* **profession** - A profession for the actor, based on the publisher field. e.g. `Printed by xxxx` -> `printer`

Latest version of the final output csv can be found at [the unified ESTC data repository](https://github.com/COMHIS/estc-data-private/tree/master/estc-publishers).

## Software versions, notes
Python version 3.6.3. All the required libraries for various Python scripts are in [requirements.txt](./requirements.txt).

R version 3.4.3. 

### Next steps

Named entities, that is, actors and their addresses, could probably be better detected with help of a named entity recognition software. Work on using the Stanford parser for this has been started, and that part of the project resides in `./stanford_parser`. As part of that, it would also make sense to convert sall of the existing codebase to Python.
